/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.pa.controller;

import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.inject.Inject;
import javax.persistence.PersistenceException;
import org.hibernate.exception.ConstraintViolationException;
import org.pa.entity.Author;
import org.pa.exception.MessageDetailDefinitions;
import org.pa.repository.AuthorsRepository;
import org.pa.validation.AuthorValidator;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.support.SessionStatus;
import org.springframework.web.servlet.ModelAndView;

/**
 *
 * @author lorinpa
 * Controller component. 
 * The controller prepares resources and then dispatches the request to the appropriate view handler. 
 * 
 * Specifically a Spring MVC controller dedicated to dispatching traditional server generated views (E.G. jsp). 
 * See the org.pa.rest.controller package for the corresponding Spring MVC controller dedicated to dispatching JSON responses (the web browser renders the view).
 */
@Controller
public class AuthorController {

    private AuthorsRepository authorRepo;
    private final static String FULL_NAME_TEMPLATE = "%s, %s";
    private final static String ADD_URL = "author/add";
    private final static String MOD_URL = "author/edit";
    private final static String DEL_URL = "author/delete";
    private final static String LIST_URL = "author/list";
    private final static String REDIRECT_HOME_URL = "redirect:list.htm";

    @Inject
    @Qualifier("authorRepository")
    public void setAuthorRepo(AuthorsRepository authorRepo) {
        this.authorRepo = authorRepo;
    }

    // Displays the author's name as "LAST NAME, FIRST NAME"
    private String authorName(Author author) {
        return String.format(FULL_NAME_TEMPLATE, author.getLastName(), author.getFirstName());
    }

    @RequestMapping(value = MOD_URL, method = RequestMethod.GET)
    public ModelAndView displayEdit(@RequestParam("id") Integer id) throws Exception {
        Author author = authorRepo.findById(id);
        ModelAndView mav = new ModelAndView(MOD_URL);
        mav.addObject("author", author);
        return mav;
    }

    @RequestMapping(value = MOD_URL, method = RequestMethod.POST)
    public String submitEditForm(@ModelAttribute Author author, BindingResult result, Model model) {
        try {
            AuthorValidator authorValidator = new AuthorValidator();
            authorValidator.validate(author, result);
            if (result.hasErrors()) {
                return MOD_URL;
            }
            authorRepo.update(author.getId(), author.getFirstName(), author.getLastName());
            return REDIRECT_HOME_URL;
        } catch (PersistenceException pe) {
            if (pe.getCause() instanceof ConstraintViolationException) {
                ObjectError oe = new ObjectError("firstName", MessageDetailDefinitions.DUPLICATE_AUTHOR_EXCEPTION);
                result.addError(oe);
            } else {
                ObjectError oe = new ObjectError("firstName", MessageDetailDefinitions.SAVE_AUTHOR_EXCEPTION);
                result.addError(oe);
            }
            return MOD_URL;
        }  catch(DataIntegrityViolationException de) {
              ObjectError oe = new ObjectError("firstName", MessageDetailDefinitions.DUPLICATE_AUTHOR_EXCEPTION);
               result.addError(oe);
               return MOD_URL;
        } catch (Exception ex) {
            Logger.getLogger(AuthorController.class.getName()).log(Level.SEVERE, null, ex);
          
            return MOD_URL;
        }
    }

    // Prepare to display "Add New Author Dialog"
    @RequestMapping(value = ADD_URL, method = RequestMethod.GET)
    public ModelAndView displayAddAuthor() throws Exception {
        Author author = new Author();
        ModelAndView mav = new ModelAndView(ADD_URL);
        mav.addObject("author", author);
        return mav;
    }

    // The user has submitted the "Add New Author Dialog". Validate the user input, insert the new author in the database, retrieve the new author id (generated by the database)
    // 
    @RequestMapping(value = ADD_URL, method = RequestMethod.POST)
    public String submitAddAuthor(@ModelAttribute Author author, BindingResult result, Model model) {
        try {
            AuthorValidator authorValidator = new AuthorValidator();
            authorValidator.validate(author, result);
            if (result.hasErrors()) {
                return ADD_URL;
            }
            authorRepo.addNew(author);
            return REDIRECT_HOME_URL;
        } catch (PersistenceException pe) {
            if (pe.getCause() instanceof ConstraintViolationException) {
                ObjectError oe = new ObjectError("firstName", MessageDetailDefinitions.DUPLICATE_AUTHOR_EXCEPTION);
                result.addError(oe);
            } else {
                ObjectError oe = new ObjectError("firstName", MessageDetailDefinitions.SAVE_AUTHOR_EXCEPTION);
                result.addError(oe);
            }
            return ADD_URL;
        } catch (Exception ex) {
            Logger.getLogger(AuthorController.class.getName()).log(Level.SEVERE, null, ex);
            return ADD_URL;
        }
    }

    @RequestMapping(value = DEL_URL, method = RequestMethod.GET)
    public ModelAndView displayDeleteAuthor(@RequestParam("id") Integer id) throws Exception {
        Author author = authorRepo.findById(id);
        ModelAndView mav = new ModelAndView(DEL_URL);
        mav.addObject("author", author);
        return mav;
    }

    @RequestMapping(value = DEL_URL, method = RequestMethod.POST)
    public String submitDeleteForm(@ModelAttribute Author author, BindingResult result, SessionStatus status) {
        try {
            authorRepo.delete(author);
            return REDIRECT_HOME_URL;
        } catch (PersistenceException pe) {
            ObjectError oe = new ObjectError("author", MessageDetailDefinitions.DELETE_AUTHOR_EXCEPTION);
            result.addError(oe);
            return DEL_URL;
        } catch (Exception ex) {
            Logger.getLogger(AuthorController.class.getName()).log(Level.SEVERE, null, ex);
            ObjectError oe = new ObjectError("author", MessageDetailDefinitions.DELETE_AUTHOR_EXCEPTION);
            result.addError(oe);
            return DEL_URL;
        }
    }

    @RequestMapping(value = LIST_URL, method = RequestMethod.GET)
    public ModelAndView list() throws Exception {
        List<Author> list;
        list = authorRepo.findAll();
        ModelAndView mav = new ModelAndView(LIST_URL);
        mav.addObject("list", list);
        return mav;
    }
}
