/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.pa.test.repository;

import org.pa.repository.*;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import junit.framework.TestCase;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.runner.RunWith;
import org.pa.AppConfig;
import org.pa.dbutil.CaseGen;

import org.pa.entity.Category;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

/**
 *
 * @author lorinpa public-action.org
 */
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(classes = AppConfig.class)
public class TestCategoryRepository extends TestCase {

    @Autowired
    private CategoriesRepository catRepo;


    
    // DELETE record
    private static int TEST_CATEGORY_DELETE_ID;
    // used to MODIFY -- 
    private static int TEST_CATEGORY_MODIFY_ID;
    // used to ADD
    private static int TEST_CATEGORY_ADD_ID;
    // used for LISt
    private static int FICTION_CATEGORY_ID;

    public TestCategoryRepository() {
    }

    @BeforeClass
    public static void setUpClass() {
       
        FICTION_CATEGORY_ID = CaseGen.getInstance().getTestCategory(CaseGen.CATEGORY_FICTION_TITLE);
      
        TEST_CATEGORY_DELETE_ID = CaseGen.getInstance().createTestCategory(new Date().getTime() + "d");
        TEST_CATEGORY_MODIFY_ID = CaseGen.getInstance().createTestCategory(new Date().getTime() + "m" );
    }

    @AfterClass
    public static void tearDownClass() {
        CaseGen.getInstance().deleteTestCategory(TEST_CATEGORY_DELETE_ID);
        CaseGen.getInstance().deleteTestCategory(TEST_CATEGORY_MODIFY_ID);
        CaseGen.getInstance().deleteTestCategory(TEST_CATEGORY_ADD_ID);
    }

    @Before
    public void setUp() {
    }

    @After
    public void tearDown() {
    }

    /*
     * Tests the category repository retrieves all the test cases generated by DbUtil.
     *  Verifes the record count.
     *  Verifies the first element type and values.
     */
    @Test
    public void testFindAllCategories() {

        boolean noErrorsFound = true;
        try {
            List<Category> list = catRepo.findAll();
            assertNotNull("verify we got results", list);
            assertTrue("verify we go at least min records", list.size() > 0);
            assertTrue("verify type", list.get(0) instanceof Category);

            boolean RECORD_FOUND = false;
            for (Category category : list) {
                if (category.getId().intValue() == FICTION_CATEGORY_ID) {
                    RECORD_FOUND = true;
                    break;
                }
            }
            assertTrue("verify we found fiction", RECORD_FOUND);

        } catch (Exception e) {
            noErrorsFound = false;
            Logger.getLogger(TestCategoryRepository.class.getName()).log(Level.SEVERE, null, e);
        }
        assertTrue("verify no exceptions raised", noErrorsFound);
    }

    @Test
    public void testAddCategory() {
        boolean noErrorsFound = true;
        String title = new Date().getTime() + "";
        try {
            Category newCategory = new Category();
            newCategory.setTitle(title);
            catRepo.addNew(newCategory);
            assertNotNull(newCategory.getId());
            assertTrue("verify new id", newCategory.getId() != null);
            TEST_CATEGORY_ADD_ID = newCategory.getId();
        } catch (Exception e) {
            noErrorsFound = false;
            Logger.getLogger(TestCategoryRepository.class.getName()).log(Level.SEVERE, null, e);
        }
        assertTrue("verify no exceptions raised", noErrorsFound);
    }

    @Test
    public void testDeleteCategory() {
        boolean noErrorsFound = true;
        List<Category> listAfterDelete = null;
        try {
            catRepo.delete(new Integer(TEST_CATEGORY_DELETE_ID));
            listAfterDelete = catRepo.findAll();
        } catch (Exception e) {
            noErrorsFound = false;
            Logger.getLogger(TestCategoryRepository.class.getName()).log(Level.SEVERE, null, e);
        }
        assertTrue("verify we didn't raise an exception", noErrorsFound);
        boolean RECORD_FOUND = false;
        for (Category category : listAfterDelete) {
            if (category.getId().intValue() == TEST_CATEGORY_DELETE_ID) {
                RECORD_FOUND = true;
                break;
            }
            assertFalse("verify record not found", RECORD_FOUND);
        }
    }

    @Test
    public void testUpdateCategory() {
        boolean noErrorsFound = true;
        try {
            Category categoryToModify = catRepo.findById(new Integer(TEST_CATEGORY_MODIFY_ID));
            String title = new Date().getTime() + "m";
            Category categoryAfterUpdate = catRepo.update(categoryToModify.getId(), title);
            assertTrue("verify updated record has original id", categoryAfterUpdate.getId().intValue() == TEST_CATEGORY_MODIFY_ID);
            assertTrue("verify updated first name", categoryAfterUpdate.getTitle().equals(title));
        } catch (Exception ex) {
            noErrorsFound = false;
            Logger.getLogger(TestCategoryRepository.class.getName()).log(Level.SEVERE, null, ex);
        }
        assertTrue("verify we didn't raise an exception", noErrorsFound);
    }

    @Test
    public void testUpdateDuplicate() {
        boolean errorsFound = false;
        try {
            Category categoryToModify = catRepo.findById(new Integer(TEST_CATEGORY_MODIFY_ID));
            Category categoryAfterUpdate = catRepo.update(categoryToModify.getId(), CaseGen.CATEGORY_FICTION_TITLE);
        } catch (Exception ex) {
            errorsFound = true;
        }
        assertTrue("verify we raised an exception", errorsFound);

        errorsFound = false; // reset for new test
        try {
            Category lastCategpry = catRepo.findById(new Integer(TEST_CATEGORY_MODIFY_ID));
            assertFalse("verify category title not modified", lastCategpry.getTitle().equals(CaseGen.CATEGORY_FICTION_TITLE));
        } catch (Exception ex) {
            errorsFound = true;
            Logger.getLogger(TestCategoryRepository.class.getName()).log(Level.SEVERE, null, ex);
        }
        assertFalse("verify we raised no exception", errorsFound);
    }

    @Test
    public void testAddDuplicate() {
        boolean errorsFound = false;

        Category newCateogry = new Category();
        newCateogry.setTitle(CaseGen.CATEGORY_FICTION_TITLE);
        try {
            catRepo.addNew(newCateogry);
        } catch (Exception ex) {
            errorsFound = true;
        }
        assertTrue("verify we raised an exception", errorsFound);
        assertTrue("author was not assigned an is", newCateogry.getId() == null);

    }

    @Test
    public void testCategoriesCount() {
        assertNotNull(catRepo.count());
        assertTrue("verify count is at least miminum generated", catRepo.count() > 0);
    }
}
