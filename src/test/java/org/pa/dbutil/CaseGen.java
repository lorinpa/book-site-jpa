package org.pa.dbutil;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author lorinpa public-action.org
 
 Generates a set of test case records. The test cases are intended for automated
 unit tests. Thus, we capture id's generated by the database engine for specific tests cases. 
 
 We capture the id keys in a collection so that we can verify the number of records. Note! number 
 of records not being tested. I left the collection in, for future enhancements of test cases. 

 */
public class CaseGen {

    /*** NOTE THE DBKEYS ARE INTEGERS NOT LONGS ***/
    private static CaseGen instance = null;
    private static int dbInstance;
    private static DbConnection dbConn;

    // ***********
    private final static String SELECT_AUTHOR = "select id  from authors where first_name=? and last_name=?";
    private final static String DELETE_ALL_AUTHORS = "delete from authors";
    private final static String INSERT_AUTHOR = "insert into authors (first_name, last_name) values (?,?)";
    private final static String DELETE_AUTHOR = "delete from authors where id =?";

    private final static String SELECT_BOOK = "select id from books where title = ? and author_id = ?";
    private final static String DELETE_ALL_BOOKS = "delete from books";
    private final static String INSERT_BOOK = "insert into books (title, author_id) values (?,?)";
    private final static String DELETE_BOOK = "delete from books where id =?";

    private final static String SELECT_CATEGORY = "select id from categories where title = ? ";
    private final static String DELETE_ALL_CATEGORIES = "delete from categories";
    private final static String INSERT_CATEGORY = "insert into categories (title) values (?)";
    private final static String DELETE_CATEGORY = "delete from categories where id =?";

    private final static String DELETE_ALL_REVIEWS = "delete from reviews";
    private final static String INSERT_REVIEW = "insert into reviews (book_id, stars,body) values (?,?,?)";
    private final static String DELETE_REVIEW = "delete from reviews where id =?";
    private final static String SELECT_REVIEW = "select id from reviews where book_id =? and stars =? and body =?";

    private final static String DELETE_ALL_BOOK_CATEGORIES = "delete from book_categories";
    private final static String INSERT_BOOK_CATEGORY = "insert into book_categories (book_id, category_id) values (?,?)";
    private final static String DELETE_BOOK_CATEGORY = "delete from book_categories  where id =?";
    private final static String SELECT_BOOK_CATEGORY = "select id from book_categories where book_id = ? and category_id = ?";

    // authors
    public final static String MARK = "Mark";
    public final static String TWAIN = "Twain";
    public final static String JOE = "Joe";
    public final static String SMOE = "Smoe";
    public final static String ED = "Ed";
    public final static String SMED = "Smed";

    // book titles
    public final static String HUCKLE_BERRY_FINN_BOOK_TITLE = "Huckleberry Finn";
    public final static String TOM_SAWYER_BOOK_TITLE = "Tom Sawyer";
    public final static String SMED_BOOK_TITLE = "Smed Book";
    public final static String SMOE_BOOK_TITLE = "Smoe Book";

    private CaseGen() {
        setInstance();
        dbConn = new DbConnection(dbInstance);
    }

    private final static void setInstance() {
        String fileName = "dev";
        if (System.getProperty("dbFileName") != null) {
            fileName = System.getProperty("dbFileName");
        }
        switch (fileName) {
            case "dev":
                dbInstance = DbConnection.DEV;
                break;
            case "test":
                dbInstance = DbConnection.TEST;
                break;
            default:
                dbInstance = DbConnection.TEST;
                break;
        }
    }

    public static CaseGen getInstance() {
        if (instance == null) {
            instance = new CaseGen();
        }
        return instance;
    }

    private final static String AUTHOR_ENTITY = "author_entity";
    private final static String BOOK_ENTITY = "book_entity";
    private final static String CATEGORY_ENTITY = "category_entity";
    private final static String BOOK_CATEGORY_ENTITY = "book_category_entity";
    private final static String REVIEW_ENTITY = "review_entity";

    // detail behind facade method
    private void deleteRecord(String ENTITY, int id) {
        Connection conn = null;
        PreparedStatement ps = null;
        String STATEMENT = "";
        switch (ENTITY) {
            case AUTHOR_ENTITY:
                STATEMENT = DELETE_AUTHOR;
                break;
            case BOOK_ENTITY:
                STATEMENT = DELETE_BOOK;
                break;
            case CATEGORY_ENTITY:
                STATEMENT = DELETE_CATEGORY;
                break;
            case REVIEW_ENTITY:
                STATEMENT = DELETE_REVIEW;
                break;
            case BOOK_CATEGORY_ENTITY:
                STATEMENT = DELETE_BOOK_CATEGORY;
                break;
        }
        try {
            conn = dbConn.getConnection();
            ps = conn.prepareStatement(STATEMENT);
            ps.setInt(1, id);
            ps.executeUpdate();
        } catch (Exception ex) {
            Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                ps.close();
            } catch (SQLException ex) {
                Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
            }
            dbConn.closeConnection(conn);
            conn = null;
        }
    }

    // detail behind facade method
    private void deleteRecords(String ENTITY) {
        Connection conn = null;
        Statement statement = null;
        String STATEMENT = "";
        switch (ENTITY) {
            case AUTHOR_ENTITY:
                STATEMENT = DELETE_ALL_AUTHORS;
                break;
            case BOOK_ENTITY:
                STATEMENT = DELETE_ALL_BOOKS;
                break;
            case CATEGORY_ENTITY:
                STATEMENT = DELETE_ALL_CATEGORIES;
                break;
            case REVIEW_ENTITY:
                STATEMENT = DELETE_ALL_REVIEWS;
                break;
            case BOOK_CATEGORY_ENTITY:
                STATEMENT = DELETE_ALL_BOOK_CATEGORIES;
                break;
        }

        try {
            conn = dbConn.getConnection();
            statement = conn.createStatement();
            statement.executeUpdate(STATEMENT);
            conn.commit();
        } catch (Exception ex) {
            Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                statement.close();
            } catch (SQLException ex) {
                Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
            }
            dbConn.closeConnection(conn);
            conn = null;
        }
    }

    public void createAuthors() {
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        int id = -1;
        try {
            conn = dbConn.getConnection();
            ps = conn.prepareStatement(INSERT_AUTHOR, PreparedStatement.RETURN_GENERATED_KEYS);
            ps.setString(1, MARK);
            ps.setString(2, TWAIN);
            ps.executeUpdate();
            rs = ps.getGeneratedKeys();
            rs.next();
            id = rs.getInt(1);

            ps = conn.prepareStatement(INSERT_AUTHOR, PreparedStatement.RETURN_GENERATED_KEYS);
            ps.setString(1, JOE);
            ps.setString(2, SMOE);
            ps.executeUpdate();
            rs = ps.getGeneratedKeys();
            rs.next();
            id = rs.getInt(1);

            // Note! Ed Smed needs to be added last -- marks the end of the generated Authors
            ps = conn.prepareStatement(INSERT_AUTHOR, PreparedStatement.RETURN_GENERATED_KEYS);
            ps.setString(1, ED);
            ps.setString(2, SMED);
            ps.executeUpdate();
            rs = ps.getGeneratedKeys();
            rs.next();

            id = rs.getInt(1);
            conn.commit();

        } catch (Exception ex) {
            Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
        } finally {

            try {
                rs.close();
            } catch (SQLException ex) {
                Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                ps.close();
            } catch (SQLException ex) {
                Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
            }
            dbConn.closeConnection(conn);
            conn = null;
        }
    }

    public void deleteAllAuthors() {
        deleteRecords(AUTHOR_ENTITY);
    }

    public int getTestAuthor(String first_name, String last_name) {
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        int id = -1;
        try {
            conn = dbConn.getConnection();
            ps = conn.prepareStatement(SELECT_AUTHOR);
            ps.setString(1, first_name);
            ps.setString(2, last_name);
            rs = ps.executeQuery();
            rs.next();
            id = rs.getInt(1);
        } catch (Exception ex) {
            Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                rs.close();
            } catch (SQLException ex) {
                Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                ps.close();
            } catch (SQLException ex) {
                Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
            }
            dbConn.closeConnection(conn);
            conn = null;
        }
        return id;
    }

    public int createTestAuthor(String first_name, String last_name) {
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        int id = -1;
        try {
            conn = dbConn.getConnection();
            ps = conn.prepareStatement(SELECT_AUTHOR);
            ps.setString(1, first_name);
            ps.setString(2, last_name);
            rs = ps.executeQuery();
            if (!rs.first()) {
                ps = conn.prepareStatement(INSERT_AUTHOR,PreparedStatement.RETURN_GENERATED_KEYS);
                ps.setString(1, first_name);
                ps.setString(2, last_name);
                ps.executeUpdate();
                rs = ps.getGeneratedKeys();
                rs.next();
            }
            id = rs.getInt(1);

        } catch (Exception ex) {
            Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                rs.close();
            } catch (SQLException ex) {
                Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                ps.close();
            } catch (SQLException ex) {
                Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
            }
            dbConn.closeConnection(conn);
            conn = null;
        }
        return id;
    }

    // facacde
    public void deleteTestAuthor(int id) {
        deleteRecord(AUTHOR_ENTITY, id);
    }

    public void createBooks() {
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        int id = -1;

        int MARK_TWAIN_ID = getTestAuthor(MARK, TWAIN);
        int ED_SMED_ID = getTestAuthor(ED, SMED);
        int JOE_SMOE_ID = getTestAuthor(JOE, SMOE);

        try {
            conn = dbConn.getConnection();

            ps = conn.prepareStatement(INSERT_BOOK, PreparedStatement.RETURN_GENERATED_KEYS);
            ps.setString(1, HUCKLE_BERRY_FINN_BOOK_TITLE);
            ps.setInt(2, MARK_TWAIN_ID);
            ps.executeUpdate();
            rs = ps.getGeneratedKeys();
            rs.next();
            id = rs.getInt(1);

            ps = conn.prepareStatement(INSERT_BOOK, PreparedStatement.RETURN_GENERATED_KEYS);
            ps.setString(1, TOM_SAWYER_BOOK_TITLE);
            ps.setLong(2, MARK_TWAIN_ID);
            ps.executeUpdate();
            rs = ps.getGeneratedKeys();
            rs.next();
            id = rs.getInt(1);

            ps = conn.prepareStatement(INSERT_BOOK, PreparedStatement.RETURN_GENERATED_KEYS);
            ps.setString(1, SMOE_BOOK_TITLE);
            ps.setInt(2, JOE_SMOE_ID);
            ps.executeUpdate();
            rs = ps.getGeneratedKeys();
            rs.next();
            id = rs.getInt(1);

            ps = conn.prepareStatement(INSERT_BOOK, PreparedStatement.RETURN_GENERATED_KEYS);
            ps.setString(1, SMED_BOOK_TITLE);
            ps.setInt(2, ED_SMED_ID);
            ps.executeUpdate();
            rs = ps.getGeneratedKeys();
            rs.next();
            id = rs.getInt(1);
            conn.commit();
        } catch (Exception ex) {
            Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
        } finally {

            try {
                rs.close();
            } catch (SQLException ex) {
                Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                ps.close();
            } catch (SQLException ex) {
                Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
            }
            dbConn.closeConnection(conn);
            conn = null;
        }
    }

    public void deleteAllBooks() {
        deleteRecords(BOOK_ENTITY);
    }

    public int getTestBook(String title, int author_id) {
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        int id = -1;
        try {
            conn = dbConn.getConnection();
            ps = conn.prepareStatement(SELECT_BOOK);
            ps.setString(1, title);
            ps.setInt(2, author_id);
            rs = ps.executeQuery();
            rs.next();
            id = rs.getInt(1);
            conn.commit();
        } catch (Exception ex) {
            Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                rs.close();
            } catch (SQLException ex) {
                Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                ps.close();
            } catch (SQLException ex) {
                Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
            }
            dbConn.closeConnection(conn);
            conn = null;
        }
        return id;
    }

    public int createTestBook(String title, int author_id) {
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        int id = -1;

        try {
            conn = dbConn.getConnection();
            ps = conn.prepareStatement(INSERT_BOOK,PreparedStatement.RETURN_GENERATED_KEYS);
            ps.setString(1, title);
            ps.setInt(2, author_id);
            ps.executeUpdate();
            rs = ps.getGeneratedKeys();
            rs.next();
            id = rs.getInt(1);
        } catch (Exception ex) {
            Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
        } finally {

            try {
                rs.close();
            } catch (SQLException ex) {
                Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                ps.close();
            } catch (SQLException ex) {
                Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
            }
            dbConn.closeConnection(conn);
            conn = null;
        }
        return id;
    }

    public void deleteTestBook(int id) {
        deleteRecord(BOOK_ENTITY, id);
    }

    public final static String CATEGORY_FICTION_TITLE = "Fiction";
    public final static String CATEGORY_HUMOR_TITLE = "Humor";
    public final static String CATEGORY_TECHNICAL_TITLE = "Technical";

    public void createCateogries() {
        Connection conn = null;
        PreparedStatement ps = null;

        ResultSet rs = null;
        int id = -1;
        try {
            conn = dbConn.getConnection();
            ps = conn.prepareStatement(INSERT_CATEGORY,PreparedStatement.RETURN_GENERATED_KEYS);
            ps.setString(1, CATEGORY_FICTION_TITLE);
            ps.executeUpdate();
            rs = ps.getGeneratedKeys();
            rs.next();
            id = rs.getInt(1);

            ps.setString(1, CATEGORY_HUMOR_TITLE);
            ps.executeUpdate();
            rs = ps.getGeneratedKeys();
            rs.next();
            id = rs.getInt(1);

            ps.setString(1, CATEGORY_TECHNICAL_TITLE);
            ps.executeUpdate();
            rs = ps.getGeneratedKeys();
            rs.next();
            id = rs.getInt(1);
            conn.commit();

        } catch (Exception ex) {
            Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                rs.close();
            } catch (SQLException ex) {
                Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                ps.close();
            } catch (SQLException ex) {
                Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
            }
            dbConn.closeConnection(conn);
            conn = null;
        }
    }

    public int createTestCategory(String title) {
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        int id = -1;
        try {
            conn = dbConn.getConnection();
            ps = conn.prepareStatement(INSERT_CATEGORY,PreparedStatement.RETURN_GENERATED_KEYS);
            ps.setString(1, title);
            ps.executeUpdate();
            rs = ps.getGeneratedKeys();
            rs.next();
            id = rs.getInt(1);
        } catch (Exception ex) {
            Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                rs.close();
            } catch (SQLException ex) {
                Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                ps.close();
            } catch (SQLException ex) {
                Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
            }
            dbConn.closeConnection(conn);
            conn = null;
        }
        return id;
    }

    public void deleteAllCategories() {
        deleteRecords(CATEGORY_ENTITY);
    }

    public int getTestCategory(String title) {
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        int id = -1;
        try {
            conn = dbConn.getConnection();
            ps = conn.prepareStatement(SELECT_CATEGORY,PreparedStatement.RETURN_GENERATED_KEYS);
            ps.setString(1, title);
            rs = ps.executeQuery();
            rs.next();
            id = rs.getInt(1);
        } catch (Exception ex) {
            Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                rs.close();
            } catch (SQLException ex) {
                Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                ps.close();
            } catch (SQLException ex) {
                Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
            }
            dbConn.closeConnection(conn);
            conn = null;
        }
        return id;
    }

    public void deleteTestCategory(int id) {
        deleteRecord(CATEGORY_ENTITY, id);
    }

    public static String REVIEW_BODY_FIVE_STAR = "this book is great";
    public static String REVIEW_BODY_TWO_STAR = "this book is ok";
    public static String REVIEW_BODY_NO_STAR = "this book stinks";

    public void deleteAllReviews() {
        deleteRecords(REVIEW_ENTITY);
    }

    public void createReviews() {
        Connection conn = null;
        PreparedStatement ps = null;

        ResultSet rs = null;
        int id = -1;
        int AUTHOR_ID_MARK_TWAIN = getTestAuthor(MARK, TWAIN);
        int AUTHOR_ID_JOE_SMOE = getTestAuthor(JOE, SMOE);
        int AUTHOR_ID_ED_SMED = getTestAuthor(ED, SMED);

        int BOOK_ID_HUCKLEBERRY_FINN = getTestBook(HUCKLE_BERRY_FINN_BOOK_TITLE, AUTHOR_ID_MARK_TWAIN);
        int BOOK_ID_TOM_SAWYER = getTestBook(TOM_SAWYER_BOOK_TITLE, AUTHOR_ID_MARK_TWAIN);
        int BOOK_ID_SMOES_BOOK = getTestBook(SMOE_BOOK_TITLE, AUTHOR_ID_JOE_SMOE);
        int BOOK_ID_SMEDS_BOOK = getTestBook(SMED_BOOK_TITLE, AUTHOR_ID_ED_SMED);

        try {
            conn = dbConn.getConnection();
            ps = conn.prepareStatement(INSERT_REVIEW,PreparedStatement.RETURN_GENERATED_KEYS);
            ps.setInt(1, BOOK_ID_HUCKLEBERRY_FINN);
            ps.setInt(2, 5); // FIVE STARS
            ps.setString(3, REVIEW_BODY_FIVE_STAR);
            ps.executeUpdate();
            rs = ps.getGeneratedKeys();
            rs.next();
            id = rs.getInt(1);

            // We add a second review of huckleberry finn
            ps.setInt(1, BOOK_ID_HUCKLEBERRY_FINN);
            ps.setInt(2, 2);
            ps.setString(3, REVIEW_BODY_TWO_STAR);
            ps.executeUpdate();
            rs = ps.getGeneratedKeys();
            rs.next();
            id = rs.getInt(1);

            ps.setInt(1, BOOK_ID_TOM_SAWYER);
            ps.setInt(2, 5);
            ps.setString(3, REVIEW_BODY_FIVE_STAR);
            ps.executeUpdate();
            rs = ps.getGeneratedKeys();
            rs.next();
            id = rs.getInt(1);

            ps.setInt(1, BOOK_ID_SMOES_BOOK);
            ps.setInt(2, 0);
            ps.setString(3, REVIEW_BODY_NO_STAR);
            ps.executeUpdate();
            rs = ps.getGeneratedKeys();
            rs.next();

            ps.setInt(1, BOOK_ID_SMEDS_BOOK);
            ps.setInt(2, 0);
            ps.setString(3, REVIEW_BODY_NO_STAR);
            ps.executeUpdate();
            rs = ps.getGeneratedKeys();
            rs.next();
            id = rs.getInt(1);
            conn.commit();

        } catch (Exception ex) {
            Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
        } finally {

            try {
                rs.close();
            } catch (SQLException ex) {
                Logger.getLogger(CaseGen.class.getName()).log(Level.WARNING, null, ex);
            }
            try {
                ps.close();
            } catch (SQLException ex) {
                Logger.getLogger(CaseGen.class.getName()).log(Level.WARNING, null, ex);
            }
            dbConn.closeConnection(conn);
            conn = null;
        }
    }

    public int createTestReview(int book_id, int stars, String body) {
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        int id = -1;
        try {
            conn = dbConn.getConnection();
            ps = conn.prepareStatement(INSERT_REVIEW,PreparedStatement.RETURN_GENERATED_KEYS);
            ps.setInt(1, book_id);
            ps.setInt(2, stars);
            ps.setString(3, body);
            ps.executeUpdate();
            rs = ps.getGeneratedKeys();
            rs.next();
            id = rs.getInt(1);
        } catch (Exception ex) {
            Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                rs.close();
            } catch (SQLException ex) {
                Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                ps.close();
            } catch (SQLException ex) {
                Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
            }
            dbConn.closeConnection(conn);
            conn = null;
        }
        return id;
    }

    public int getTestReview(int book_id, int stars, String body) {
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        int id = -1;
        try {
            conn = dbConn.getConnection();
            ps = conn.prepareStatement(SELECT_REVIEW);
            ps.setInt(1, book_id);
            ps.setInt(2, stars);
            ps.setString(3, body);
            rs = ps.executeQuery();
            rs.next();
            id = rs.getInt(1);
        } catch (Exception ex) {
            Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                rs.close();
            } catch (SQLException ex) {
                Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                ps.close();
            } catch (SQLException ex) {
                Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
            }
            dbConn.closeConnection(conn);
            conn = null;
        }
        return id;
    }

    public void deleteTestReview(int id) {
        deleteRecord(REVIEW_ENTITY, id);
    }

    public void createBookCategories() {
        Connection conn = null;
        PreparedStatement ps = null;

        ResultSet rs = null;
        int id = -1;

        int AUTHOR_ID_MARK_TWAIN = getTestAuthor(MARK, TWAIN);
        int AUTHOR_ID_JOE_SMOE = getTestAuthor(JOE, SMOE);
        int AUTHOR_ID_ED_SMED = getTestAuthor(ED, SMED);

        int BOOK_ID_HUCKLEBERRY_FINN = getTestBook(HUCKLE_BERRY_FINN_BOOK_TITLE, AUTHOR_ID_MARK_TWAIN);
        int BOOK_ID_SMOES_BOOK = getTestBook(SMOE_BOOK_TITLE, AUTHOR_ID_JOE_SMOE);
        int BOOK_ID_SMEDS_BOOK = getTestBook(SMED_BOOK_TITLE, AUTHOR_ID_ED_SMED);

        int CATEGORY_ID_HUMOR = getTestCategory(CATEGORY_HUMOR_TITLE);
        int CATEGORY_ID_FICTION = getTestCategory(CATEGORY_FICTION_TITLE);
        int CATEGORY_ID_TECHNICAL = getTestCategory(CATEGORY_TECHNICAL_TITLE);

        try {
            conn = dbConn.getConnection();
            ps = conn.prepareStatement(INSERT_BOOK_CATEGORY, PreparedStatement.RETURN_GENERATED_KEYS);

            ps.setInt(1, BOOK_ID_HUCKLEBERRY_FINN);
            ps.setInt(2, CATEGORY_ID_HUMOR);
            ps.executeUpdate();
            rs = ps.getGeneratedKeys();
            rs.next();
            id = rs.getInt(1);

            ps.setInt(1, BOOK_ID_HUCKLEBERRY_FINN);
            ps.setInt(2, CATEGORY_ID_FICTION);
            ps.executeUpdate();
            rs = ps.getGeneratedKeys();
            rs.next();
            id = rs.getInt(1);

            ps.setInt(1, BOOK_ID_SMOES_BOOK);
            ps.setInt(2, CATEGORY_ID_TECHNICAL);
            ps.executeUpdate();
            rs = ps.getGeneratedKeys();
            rs.next();
            id = rs.getInt(1);

            ps.setInt(1, BOOK_ID_SMEDS_BOOK);
            ps.setInt(2, CATEGORY_ID_FICTION);
            ps.executeUpdate();
            rs = ps.getGeneratedKeys();
            rs.next();
            id = rs.getInt(1);
            conn.commit();
        } catch (Exception ex) {
            Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
        } finally {

            try {
                rs.close();
            } catch (SQLException ex) {
                Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                ps.close();
            } catch (SQLException ex) {
                Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
            }
            dbConn.closeConnection(conn);
            conn = null;
        }
    }

    public int createTestBookCategory(int book_id, int category_id) {
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        int id = -1;
        try {
            conn = dbConn.getConnection();
            ps = conn.prepareStatement(INSERT_BOOK_CATEGORY, PreparedStatement.RETURN_GENERATED_KEYS);
            ps.setInt(1, book_id);
            ps.setInt(2, category_id);
            ps.executeUpdate();
            rs = ps.getGeneratedKeys();
            rs.next();
            id = rs.getInt(1);
        } catch (Exception ex) {
            Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                rs.close();
            } catch (SQLException ex) {
                Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                ps.close();
            } catch (SQLException ex) {
                Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
            }
            dbConn.closeConnection(conn);
            conn = null;
        }
        return id;
    }

    public int getTestBookCategory(int book_id, int category_id) {
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        int id = -1;
        try {
            conn = dbConn.getConnection();
            ps = conn.prepareStatement(SELECT_BOOK_CATEGORY);
            ps.setInt(1, book_id);
            ps.setInt(2, category_id);
            rs = ps.executeQuery();
            rs.next();
            id = rs.getInt(1);
        } catch (Exception ex) {
            Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                rs.close();
            } catch (SQLException ex) {
                Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                ps.close();
            } catch (SQLException ex) {
                Logger.getLogger(CaseGen.class.getName()).log(Level.SEVERE, null, ex);
            }
            dbConn.closeConnection(conn);
            conn = null;
        }
        return id;
    }

    public void deleteAllBookCategories() {
        deleteRecords(BOOK_CATEGORY_ENTITY);
    }

    public void deleteTestBookCategory(int id) {
        deleteRecord(BOOK_CATEGORY_ENTITY, id);
    }

    public static void main(String[] args) {

        String DELETE_ALL = "-DELETE_ALL";
        String CREATE_ALL = "-CREATE_ALL";
        boolean do_delete_all = false;
        boolean do_create_all = false;
        int len = args.length;
        for (int nIndex = 0; nIndex < len; nIndex++) {
            System.out.println("arg " + nIndex + " =  " + args[nIndex]);
            if (args[nIndex].equals(DELETE_ALL)) {
                do_delete_all = true;
            }
            if (args[nIndex].equals(CREATE_ALL)) {
                do_create_all = true;
            }
        }
        
        if (do_delete_all) {
            System.out.println("Deleting all records");
            CaseGen.getInstance().deleteAllAuthors();
            CaseGen.getInstance().deleteAllBooks();
            CaseGen.getInstance().deleteAllCategories();
            CaseGen.getInstance().deleteAllReviews();
            CaseGen.getInstance().deleteAllBookCategories();
        }

        if (do_create_all) {
            System.out.println("Creating all records");
            CaseGen.getInstance().createAuthors();
            CaseGen.getInstance().createBooks();
            CaseGen.getInstance().createCateogries();
            CaseGen.getInstance().createReviews();
            CaseGen.getInstance().createBookCategories();
        }

    }
}
